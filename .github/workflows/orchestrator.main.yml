name: main-branch

on:
  pull_request:
    branches:
      - main

jobs:
  orchestrator-lint-report:
    name: Lint report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install tox
        run: pip install tox
      - name: Run tests using tox
        run: |
          set -eux
          charms="$(find ./orchestrator-bundle/ -name tox.ini)"
          for charm in ${charms}; do
            tox -c "${charm}" -e lint
          done

  orchestrator-static-analysis:
    name: Static analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install tox
        run: pip install tox
      - name: Run tests using tox
        run: |
          set -eux
          charms="$(find ./orchestrator-bundle/ -name tox.ini)"
          for charm in ${charms}; do
            tox -c "${charm}" -e static
          done

  orchestrator-unit-tests-with-coverage:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install tox
        run: pip install tox
      - name: Run tests using tox
        run: |
          set -eux
          charms="$(find ./orchestrator-bundle/ -name tox.ini)"
          for charm in ${charms}; do
            tox -c "${charm}" -e unit
          done

  orchestrator-integration-test:
    name: Integration tests
    runs-on: standalone
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup operator environment
        run: |
          echo "# Install core snap"
          /usr/bin/sudo snap install core
          echo "# Install LXD"
          /usr/bin/sudo apt-get remove -qy lxd lxd-client || true
          /usr/bin/sudo snap install lxd
          echo "# Initialize LXD"
          /usr/bin/sudo lxd waitready
          /usr/bin/sudo lxd init --auto
          /usr/bin/sudo chmod a+wr /var/snap/lxd/common/lxd/unix.socket
          /snap/bin/lxc network set lxdbr0 ipv6.address none
          /usr/bin/sudo usermod -a -G lxd $USER
          echo "# Configure LXD"
          /usr/bin/sudo lxc --project charmcraft project create local:charmcraft || true
          /usr/bin/sudo lxc --project charmcraft profile set default environment.http_proxy http://squid.internal:3128/
          /usr/bin/sudo lxc --project charmcraft profile set default environment.https_proxy http://squid.internal:3128/
          /usr/bin/sudo lxc --project charmcraft profile set default environment.HTTP_PROXY http://squid.internal:3128/
          /usr/bin/sudo lxc --project charmcraft profile set default environment.HTTPS_PROXY http://squid.internal:3128/
          echo "# Install tox"
          /usr/bin/sudo apt-get update -yqq
          /usr/bin/sudo apt-get install -yqq python3-pip
          /usr/bin/sudo --preserve-env=http_proxy,https_proxy,no_proxy pip3 install tox
          echo "# Install Juju"
          /usr/bin/sudo snap install juju --classic --channel=latest/stable
          echo "# Install tools"
          /usr/bin/sudo snap install jq
          /usr/bin/sudo snap install charm --classic --channel=latest/stable
          /usr/bin/sudo snap install charmcraft --classic --channel=latest/stable
          /usr/bin/sudo snap install juju-bundle --classic --channel=latest/stable
          echo "# Install microk8s"
          /usr/bin/sudo snap install microk8s --classic
          echo "# Initialize microk8s"
          /usr/bin/bash -c "sudo usermod -a -G microk8s $USER"
          /usr/bin/sg microk8s -c "microk8s status --wait-ready"
          /usr/bin/sg microk8s -c "microk8s enable storage rbac dns:185.125.188.1"
          /usr/bin/sg microk8s -c "microk8s kubectl -n kube-system rollout status deployment/coredns"
          /usr/bin/sg microk8s -c "microk8s kubectl -n kube-system rollout status deployment/hostpath-provisioner"
          echo "# Bootstrap controller"
          /usr/bin/sg microk8s -c "juju bootstrap --debug --verbose microk8s integration-tests-${GITHUB_RUN_ID} --model-default test-mode=true --model-default automatically-retry-hooks=false --model-default logging-config='<root>=DEBUG'  --bootstrap-constraints=''"
      - name: Run integration tests
        run: |
          set -eux
          charms="$(find ./orchestrator-bundle/ -name tox.ini | grep operator)"
          for charm in ${charms}; do
            tox -c "${charm}" -e integration
          done
      - name: Clean up
        if: always()
        run: |
          yes | juju kill-controller integration-tests-${GITHUB_RUN_ID}
